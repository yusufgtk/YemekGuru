// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YemekGuru.repository.Concrete;

#nullable disable

namespace YemekGuru.repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240312113210_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("YemekGuru.entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("City")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("District")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("YemekGuru.entity.ApplySeller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApplyState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinimumOrderPrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("TCKN")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplySellers");
                });

            modelBuilder.Entity("YemekGuru.entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("YemekGuru.entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("YemekGuru.entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(783),
                            Description = "Lezzetli döner çeşitleri sunan kategori.",
                            ImageUrl = "1.jpeg",
                            Name = "Döner",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(784)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(785),
                            Description = "Farklı pizza lezzetlerini içeren kategori.",
                            ImageUrl = "2.jpeg",
                            Name = "Pizza",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(786)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(787),
                            Description = "Farklı burger lezzetlerini içeren kategori.",
                            ImageUrl = "3.jpeg",
                            Name = "Burger",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(788)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(789),
                            Description = "Çeşitli çiğ köfte türlerini içeren kategori.",
                            ImageUrl = "4.jpeg",
                            Name = "Çiğ Köfte",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(790)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(791),
                            Description = "Geleneksel kebap çeşitlerini içeren kategori.",
                            ImageUrl = "5.jpeg",
                            Name = "Kebap",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(791)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(792),
                            Description = "Lezzetli kanat çeşitleri içeren kategori.",
                            ImageUrl = "6.jpeg",
                            Name = "Kanat",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(793)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(795),
                            Description = "Ev yapımı yemeklerin yer aldığı kategori.",
                            ImageUrl = "7.jpeg",
                            Name = "Pide ve Lahmacun",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(796)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(797),
                            Description = "Ev yapımı yemeklerin yer aldığı kategori.",
                            ImageUrl = "8.jpeg",
                            Name = "Ev Yemeği",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(797)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(799),
                            Description = "Vejetaryen lezzetlerin yer aldığı kategori.",
                            ImageUrl = "9.jpeg",
                            Name = "Vejeteryan",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(799)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(801),
                            Description = "Farklı tatlı çeşitlerini içeren kategori.",
                            ImageUrl = "10.jpeg",
                            Name = "Tatlı",
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(802)
                        });
                });

            modelBuilder.Entity("YemekGuru.entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 25,
                            IsActive = true,
                            Name = "Erzurum"
                        },
                        new
                        {
                            Id = 34,
                            IsActive = true,
                            Name = "İstanbul"
                        });
                });

            modelBuilder.Entity("YemekGuru.entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId1");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YemekGuru.entity.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("YemekGuru.entity.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1153,
                            CityId = 25,
                            IsActive = true,
                            Name = "AŞKALE"
                        },
                        new
                        {
                            Id = 1235,
                            CityId = 25,
                            IsActive = true,
                            Name = "ÇAT"
                        },
                        new
                        {
                            Id = 1319,
                            CityId = 25,
                            IsActive = true,
                            Name = "MERKEZ"
                        },
                        new
                        {
                            Id = 1392,
                            CityId = 25,
                            IsActive = true,
                            Name = "HINIS"
                        },
                        new
                        {
                            Id = 1396,
                            CityId = 25,
                            IsActive = true,
                            Name = "HORASAN"
                        },
                        new
                        {
                            Id = 1416,
                            CityId = 25,
                            IsActive = true,
                            Name = "İSPİR"
                        },
                        new
                        {
                            Id = 1444,
                            CityId = 25,
                            IsActive = true,
                            Name = "KARAYAZI"
                        },
                        new
                        {
                            Id = 1540,
                            CityId = 25,
                            IsActive = true,
                            Name = "NARMAN"
                        },
                        new
                        {
                            Id = 1550,
                            CityId = 25,
                            IsActive = true,
                            Name = "OLTU"
                        },
                        new
                        {
                            Id = 1551,
                            CityId = 25,
                            IsActive = true,
                            Name = "OLUR"
                        },
                        new
                        {
                            Id = 1567,
                            CityId = 25,
                            IsActive = true,
                            Name = "PASİNLER"
                        },
                        new
                        {
                            Id = 1657,
                            CityId = 25,
                            IsActive = true,
                            Name = "ŞENKAYA"
                        },
                        new
                        {
                            Id = 1674,
                            CityId = 25,
                            IsActive = true,
                            Name = "TEKMAN"
                        },
                        new
                        {
                            Id = 1683,
                            CityId = 25,
                            IsActive = true,
                            Name = "TORTUM"
                        },
                        new
                        {
                            Id = 1812,
                            CityId = 25,
                            IsActive = true,
                            Name = "KARAÇOBAN"
                        },
                        new
                        {
                            Id = 1851,
                            CityId = 25,
                            IsActive = true,
                            Name = "UZUNDERE"
                        },
                        new
                        {
                            Id = 1865,
                            CityId = 25,
                            IsActive = true,
                            Name = "PAZARYOLU"
                        },
                        new
                        {
                            Id = 1945,
                            CityId = 25,
                            IsActive = true,
                            Name = "AZİZİYE"
                        },
                        new
                        {
                            Id = 1967,
                            CityId = 25,
                            IsActive = true,
                            Name = "KÖPRÜKÖY"
                        },
                        new
                        {
                            Id = 2044,
                            CityId = 25,
                            IsActive = true,
                            Name = "PALANDÖKEN"
                        },
                        new
                        {
                            Id = 2045,
                            CityId = 25,
                            IsActive = true,
                            Name = "YAKUTİYE"
                        },
                        new
                        {
                            Id = 1103,
                            CityId = 34,
                            IsActive = true,
                            Name = "ADALAR"
                        },
                        new
                        {
                            Id = 1166,
                            CityId = 34,
                            IsActive = true,
                            Name = "BAKIRKÖY"
                        },
                        new
                        {
                            Id = 1183,
                            CityId = 34,
                            IsActive = true,
                            Name = "BEŞİKTAŞ"
                        },
                        new
                        {
                            Id = 1185,
                            CityId = 34,
                            IsActive = true,
                            Name = "BEYKOZ"
                        },
                        new
                        {
                            Id = 1186,
                            CityId = 34,
                            IsActive = true,
                            Name = "BEYOĞLU"
                        },
                        new
                        {
                            Id = 1237,
                            CityId = 34,
                            IsActive = true,
                            Name = "ÇATALCA"
                        },
                        new
                        {
                            Id = 1325,
                            CityId = 34,
                            IsActive = true,
                            Name = "EYÜP"
                        },
                        new
                        {
                            Id = 1327,
                            CityId = 34,
                            IsActive = true,
                            Name = "FATİH"
                        },
                        new
                        {
                            Id = 1336,
                            CityId = 34,
                            IsActive = true,
                            Name = "GAZİOSMANPAŞA"
                        },
                        new
                        {
                            Id = 1421,
                            CityId = 34,
                            IsActive = true,
                            Name = "KADIKÖY"
                        },
                        new
                        {
                            Id = 1449,
                            CityId = 34,
                            IsActive = true,
                            Name = "KARTAL"
                        },
                        new
                        {
                            Id = 1604,
                            CityId = 34,
                            IsActive = true,
                            Name = "SARIYER"
                        },
                        new
                        {
                            Id = 1622,
                            CityId = 34,
                            IsActive = true,
                            Name = "SİLİVRİ"
                        },
                        new
                        {
                            Id = 1659,
                            CityId = 34,
                            IsActive = true,
                            Name = "ŞİLE"
                        },
                        new
                        {
                            Id = 1663,
                            CityId = 34,
                            IsActive = true,
                            Name = "ŞİŞLİ"
                        },
                        new
                        {
                            Id = 1708,
                            CityId = 34,
                            IsActive = true,
                            Name = "ÜSKÜDAR"
                        },
                        new
                        {
                            Id = 1739,
                            CityId = 34,
                            IsActive = true,
                            Name = "ZEYTİNBURNU"
                        },
                        new
                        {
                            Id = 1782,
                            CityId = 34,
                            IsActive = true,
                            Name = "BÜYÜKÇEKMECE"
                        },
                        new
                        {
                            Id = 1810,
                            CityId = 34,
                            IsActive = true,
                            Name = "KAĞITHANE"
                        },
                        new
                        {
                            Id = 1823,
                            CityId = 34,
                            IsActive = true,
                            Name = "KÜÇÜKÇEKMECE"
                        },
                        new
                        {
                            Id = 1835,
                            CityId = 34,
                            IsActive = true,
                            Name = "PENDİK"
                        },
                        new
                        {
                            Id = 1852,
                            CityId = 34,
                            IsActive = true,
                            Name = "ÜMRANİYE"
                        },
                        new
                        {
                            Id = 1886,
                            CityId = 34,
                            IsActive = true,
                            Name = "BAYRAMPAŞA"
                        },
                        new
                        {
                            Id = 2003,
                            CityId = 34,
                            IsActive = true,
                            Name = "AVCILAR"
                        },
                        new
                        {
                            Id = 2004,
                            CityId = 34,
                            IsActive = true,
                            Name = "BAĞCILAR"
                        },
                        new
                        {
                            Id = 2005,
                            CityId = 34,
                            IsActive = true,
                            Name = "BAHÇELİEVLER"
                        },
                        new
                        {
                            Id = 2010,
                            CityId = 34,
                            IsActive = true,
                            Name = "GÜNGÖREN"
                        },
                        new
                        {
                            Id = 2012,
                            CityId = 34,
                            IsActive = true,
                            Name = "MALTEPE"
                        },
                        new
                        {
                            Id = 2014,
                            CityId = 34,
                            IsActive = true,
                            Name = "SULTANBEYLİ"
                        },
                        new
                        {
                            Id = 2015,
                            CityId = 34,
                            IsActive = true,
                            Name = "TUZLA"
                        },
                        new
                        {
                            Id = 2016,
                            CityId = 34,
                            IsActive = true,
                            Name = "ESENLER"
                        },
                        new
                        {
                            Id = 2048,
                            CityId = 34,
                            IsActive = true,
                            Name = "ARNAVUTKÖY"
                        },
                        new
                        {
                            Id = 2049,
                            CityId = 34,
                            IsActive = true,
                            Name = "ATAŞEHİR"
                        },
                        new
                        {
                            Id = 2050,
                            CityId = 34,
                            IsActive = true,
                            Name = "BAŞAKŞEHİR"
                        },
                        new
                        {
                            Id = 2051,
                            CityId = 34,
                            IsActive = true,
                            Name = "BEYLİKDÜZÜ"
                        },
                        new
                        {
                            Id = 2052,
                            CityId = 34,
                            IsActive = true,
                            Name = "ÇEKMEKÖY"
                        },
                        new
                        {
                            Id = 2053,
                            CityId = 34,
                            IsActive = true,
                            Name = "ESENYURT"
                        },
                        new
                        {
                            Id = 2054,
                            CityId = 34,
                            IsActive = true,
                            Name = "SANCAKTEPE"
                        },
                        new
                        {
                            Id = 2055,
                            CityId = 34,
                            IsActive = true,
                            Name = "SULTANGAZİ"
                        });
                });

            modelBuilder.Entity("YemekGuru.entity.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("YemekGuru.entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductTypesNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YemekGuru.entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("YemekGuru.entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Calorie")
                        .HasColumnType("REAL");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PreviousPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calorie = 500f,
                            CategoryId = 3,
                            Content = "Et, peynir, sos",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(832),
                            Description = "Sadece et, peynir ve özel sosla hazırlanan klasik burger.",
                            ImageUrl = "1.jpeg",
                            IsActive = false,
                            IsApproved = false,
                            Name = "Klasik Burger",
                            PreviousPrice = 15m,
                            Price = 110m,
                            RestaurantId = 1,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(833)
                        },
                        new
                        {
                            Id = 2,
                            Calorie = 800f,
                            CategoryId = 2,
                            Content = "Hamur, sos, peynir, sebzeler, et",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(836),
                            Description = "Karışık malzemelerle hazırlanan enfes pizza.",
                            ImageUrl = "2.jpeg",
                            IsActive = true,
                            IsApproved = false,
                            Name = "Karışık Pizza",
                            PreviousPrice = 95m,
                            Price = 100m,
                            RestaurantId = 1,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(837)
                        },
                        new
                        {
                            Id = 3,
                            Calorie = 600f,
                            CategoryId = 7,
                            Content = "Hamur, et, sebzeler",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(839),
                            Description = "Taze malzemelerle hazırlanan nefis Anadolu pidesi.",
                            ImageUrl = "3.jpeg",
                            IsActive = true,
                            IsApproved = false,
                            Name = "Anadolu Pidesi",
                            PreviousPrice = 110m,
                            Price = 100m,
                            RestaurantId = 2,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(840)
                        },
                        new
                        {
                            Id = 4,
                            Calorie = 750f,
                            CategoryId = 7,
                            Content = "Hamur, sos, peynir, hamsi, mısır",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(843),
                            Description = "Karadeniz mutfağından esinlenilen lezzetli pizza.",
                            ImageUrl = "4.jpeg",
                            IsActive = true,
                            IsApproved = false,
                            Name = "Karadeniz Pizzası",
                            PreviousPrice = 105m,
                            Price = 110m,
                            RestaurantId = 2,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(843)
                        },
                        new
                        {
                            Id = 5,
                            Calorie = 600f,
                            CategoryId = 1,
                            Content = "Et, baharatlar",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(846),
                            Description = "Et döner ile hazırlanan nefis döner.",
                            ImageUrl = "5.jpeg",
                            IsActive = true,
                            IsApproved = false,
                            Name = "Et Döner",
                            PreviousPrice = 105m,
                            Price = 120m,
                            RestaurantId = 3,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(846)
                        },
                        new
                        {
                            Id = 6,
                            Calorie = 500f,
                            CategoryId = 1,
                            Content = "Tavuk eti, sos",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(849),
                            Description = "Tavuk eti ile hazırlanan lezzetli döner.",
                            ImageUrl = "6.jpeg",
                            IsActive = true,
                            IsApproved = false,
                            Name = "Tavuk Döner",
                            PreviousPrice = 75m,
                            Price = 65m,
                            RestaurantId = 3,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(849)
                        },
                        new
                        {
                            Id = 7,
                            Calorie = 550f,
                            CategoryId = 1,
                            Content = "Et, sebzeler, sos",
                            CreatedTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(852),
                            Description = "Sebzelerle zenginleştirilmiş sağlıklı döner.",
                            ImageUrl = "https://example.com/sebzeli-doner.jpg",
                            IsActive = true,
                            IsApproved = false,
                            Name = "Sebzeli Döner",
                            PreviousPrice = 90m,
                            Price = 100m,
                            RestaurantId = 3,
                            UpdateTime = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(852)
                        });
                });

            modelBuilder.Entity("YemekGuru.entity.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClosingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("MinimumOrderPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpeningTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Rating")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Örnek Caddesi No: 123",
                            CityId = 34,
                            ClosingTime = "20:00",
                            Country = "Turkey",
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(648),
                            DeliveryTime = "30 dk",
                            Description = "Lezzetli burgerlerle tanınan bir restoran.",
                            DistrictId = 2004,
                            EmailAdress = "info@salonburger.com",
                            ImageUrl = "1.jpeg",
                            IsActive = true,
                            MinimumOrderPrice = 120f,
                            Name = "Salon Burger",
                            OpeningTime = "10:00",
                            PhoneNumber = "+90 555 123 4567",
                            Rating = 4.5f,
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(662)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Örnek Sokak No: 456",
                            CityId = 6,
                            ClosingTime = "21:00",
                            Country = "Turkey",
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(667),
                            DeliveryTime = "25 dk",
                            Description = "Harika pide çeşitleri sunan bir restoran.",
                            DistrictId = 1231,
                            EmailAdress = "info@pideexpress.com",
                            ImageUrl = "2.jpeg",
                            IsActive = true,
                            MinimumOrderPrice = 100f,
                            Name = "Pide Express",
                            OpeningTime = "11:00",
                            PhoneNumber = "+90 555 987 6543",
                            Rating = 4.2f,
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(667)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Örnek Sokak No: 456",
                            CityId = 25,
                            ClosingTime = "22:00",
                            Country = "Turkey",
                            CreatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(671),
                            DeliveryTime = "40 dk",
                            Description = "Türkiyenin en sevilen dönercisi",
                            DistrictId = 1945,
                            EmailAdress = "info@ustadonerci.com",
                            ImageUrl = "3.jpeg",
                            IsActive = true,
                            MinimumOrderPrice = 25f,
                            Name = "Usta Dönerci",
                            OpeningTime = "08:00",
                            PhoneNumber = "+90 535 896 14 55",
                            Rating = 4.8f,
                            UpdatedAt = new DateTime(2024, 3, 12, 14, 32, 10, 108, DateTimeKind.Local).AddTicks(671)
                        });
                });

            modelBuilder.Entity("YemekGuru.entity.CartItem", b =>
                {
                    b.HasOne("YemekGuru.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YemekGuru.entity.Comment", b =>
                {
                    b.HasOne("YemekGuru.entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId1");

                    b.HasOne("YemekGuru.entity.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("YemekGuru.entity.Complaint", b =>
                {
                    b.HasOne("YemekGuru.entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("YemekGuru.entity.OrderItem", b =>
                {
                    b.HasOne("YemekGuru.entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekGuru.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YemekGuru.entity.Product", b =>
                {
                    b.HasOne("YemekGuru.entity.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("YemekGuru.entity.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
